version: '3'
name: lab05
services:

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.2
    ports:
      - "${KAFDROP_LOCAL_PORT}:${KAFDROP_CONTAINER_PORT}"
    environment:
      KAFKA_BROKERCONNECT: "kafka:${KAFKA_BROKER_PORT}"
      SERVER_SERVLET_CONTEXTPATH: "${KAFDROP_CONTEXT_PATH}"
    networks:
      - ${NETWORK_NAME}

  mysqldb:
    image: mysql/mysql-server:5.7
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${DATABASE_LOCAL_PORT}:${DATABASE_CONTAINER_PORT}"
    restart: on-failure
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - ${NETWORK_NAME}

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CONTAINER_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - "${ZOOKEEPER_LOCAL_PORT}:${ZOOKEEPER_CONTAINER_PORT}"
    networks:
      - ${NETWORK_NAME}
  
  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_LOCAL_PORT}:${KAFKA_CONTAINER_PORT}"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_CONTAINER_PORT}"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:${KAFKA_BROKER_PORT},PLAINTEXT_HOST://${KAFKA_IP}:${KAFKA_CONTAINER_PORT}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_REPLICATION_FACTOR}
      KAFKA_LOG_RETENTION_MS: ${KAFKA_RETENTION_MS}
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: ${KAFKA_RETENTION_CHECK_INTERVAL_MS}
    networks:
      - ${NETWORK_NAME}

  app_container:
    depends_on:
      - mysqldb
      - kafka
    build: 
      context: ${BACKEND_CONTEXT_PATH}
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_LOCAL_PORT}:${BACKEND_CONTAINER_PORT}"
    environment:
      FRONTEND_IP: ${FRONTEND_IP}
      FRONTEND_PORT: ${FRONTEND_CONTAINER_PORT}
    restart: on-failure
    volumes:
      - .m2:/root/.m2    # persist Maven dependencies
    networks:
      - ${NETWORK_NAME}

  react_app:
    depends_on:
      - app_container
    build:
      context: ${FRONTEND_CONTEXT_PATH}
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_LOCAL_PORT}:${FRONTEND_CONTAINER_PORT}"
    environment:
      BACKEND_IP: ${BACKEND_IP}
      BACKEND_PORT: ${BACKEND_CONTAINER_PORT}
    restart: on-failure
    networks:
      - ${NETWORK_NAME}

networks:
  app_network:

volumes:
  mysql_data:
